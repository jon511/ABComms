package main

import (
	"net"
	"fmt"
)

func registerSession() []byte {

	// from CIP Network Library Vol 2. Section 2-4.4.2.
	var data []byte
	//eip command
	data = append(data, []byte{0x65, 0x00}...)
	//eip length
	data = append(data, []byte{0x04, 0x00}...)
	//eip session handle
	data = append(data, []byte{0x00, 0x00, 0x00, 0x00}...)
	//eip status
	data = append(data, []byte{0x00, 0x00, 0x00, 0x00}...)
	//eip context
	data = append(data, []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}...)
	//eip options
	data = append(data, []byte{0x00, 0x00, 0x00, 0x00}...)
	//eip protocol version
	data = append(data, []byte{0x01, 0x00}...)
	//eip option flay
	data = append(data, []byte{0x00, 0x00}...)

	return data
}

func forwardOpen(sessionHandle []byte) []byte {
	fwdOpen := cipForwardOpen()
	rrDataHeader := eipSendRRDataHeader(len(fwdOpen), sessionHandle)
	return append(rrDataHeader, fwdOpen...)
}

func cipForwardOpen() []byte {

	var data []byte
	// CIP Service
	data = append(data, 0x54)
	// CIP Path Size
	data = append(data, 0x02)
	// CIP Class Type
	data = append(data, 0x20)
	// CIP Class
	data = append(data, 0x06)
	// CIP Instance Type
	data = append(data, 0x24)
	// CIP Instance
	data = append(data, 0x01)
	// CIP Priority
	data = append(data, 0x0a)
	// CIP Timeout Ticks
	data = append(data, 0x0e)
	//CIP OT Connection ID (4 bytes)
	data = append(data, 0x02, 0x00, 0x00, 0x20)
	//CIP TO Connection ID (4 bytes)
	data = append(data, 0x01, 0x00, 0x00, 0x20)
	//CIP Connection Serial Number (2 bytes)
	data = append(data, int32ToSliceOfBytes(true, getRandomInt(63000), 2)...)
	//CIP Vendor ID (2 bytes)
	data = append(data, 0x37, 0x13)
	//DIP Originator serial number (4 bytes)
	data = append(data, 0x2a, 0x00, 0x00, 0x00)
	//cip multiplier (4 bytes)
	data = append(data, 0x03, 0x00, 0x00, 0x00)
	//cip OT RPI (4 bytes)
	data = append(data, 0x34, 0x12, 0x20, 0x00)
	//cip OT Network Connection Parameters (2 bytes)
	data = append(data, 0xf4, 0x43)
	//cip TO RPI (4 bytes)
	data = append(data, 0x01, 0x40, 0x20, 0x00)
	//cip TO Connection parameters (2 bytes)
	data = append(data, 0xf4, 0x43)
	//cip Transport trigger (1 byte)
	data = append(data, 0xa3)

	//connection path size / 2
	data = append(data, 0x03)

	//connection path
	data = append(data, 0x01, 0x00, 0x20, 0x02, 0x24, 0x01)

	return data

}

func eipSendRRDataHeader(frameLen int, sessionHandle []byte) []byte {

	var data []byte

	data = append(data,0x6f, 0x00)
	//eip length (2 bytes)
	data = append(data, int32ToSliceOfBytes(true, 16 + frameLen, 2)...)
	//data = append(data, 0x00)
	//eip session handle (4 bytes) value returned by RegisterSession
	data = append(data, sessionHandle...)
	//eip status (4 bytes)
	data = append(data, 0x00, 0x00, 0x00, 0x00)
	//eip context (8 bytes)
	data = append(data, 0x00, 0x00, 0x00, 0x00)
	data = append(data, 0x00, 0x00, 0x00, 0x00)
	//eip options (4 bytes)
	data = append(data, 0x00, 0x00, 0x00, 0x00)
	//eip interface handle (4 bytes)
	data = append(data, 0x00, 0x00, 0x00, 0x00)
	//eip timeout (2 bytes)
	data = append(data, 0x00, 0x00)
	//eip item count (2 bytes)
	data = append(data, 0x02, 0x00)
	//eip item 1 type (2 bytes)
	data = append(data, 0x00, 0x00)
	//eip item 1 length (2 bytes)
	data = append(data, 0x00, 0x00)
	//eip item 2 type (2 bytes)
	data = append(data, 0xb2, 0x00)
	//eip item 2 length
	data = append(data, int32ToSliceOfBytes(true,frameLen, 2)...)

	return data
}

func _getTagList(sessionHandle, otNetworkID []byte, sequenceCounter int, conn net.Conn){
	offset := 0
	fmt.Println("starting _getTagList")
	//clear program names
	//clear tagList
	//or either create local scope programNames and tagList and return

	request := buildTagListRequest("", offset)
	eipHeader := buildEipHeader(request, sessionHandle, otNetworkID, sequenceCounter)

	retData := make([]byte, 1028)
	conn.Write(eipHeader)
	retLen, _ := conn.Read(retData)

	status, _ := bytesToInt32(true, retData[48], retData[49], 0x00, 0x00)

	extractTagPacket(retData[0:retLen], "")

	for status == 6 {
		offset += 1
		request = buildTagListRequest("", offset)
		fmt.Printf("offset:%d - sequence counter:%d", offset, sequenceCounter)
		eipHeader = buildEipHeader(request, sessionHandle, otNetworkID, sequenceCounter)
		conn.Write(eipHeader)
		retLen, _ = conn.Read(retData)
		extractTagPacket(retData[0:retLen], "")
		status, _ = bytesToInt32(true, retData[48], retData[49], 0x00, 0x00)
		fmt.Println(status)
	}


}

func buildTagListRequest(programName string, offset int) []byte {
	service := 0x55
	var pathSegment []byte

	if programName != "" {
		programNameBytes := []byte(programName)
		pathSegment = append(pathSegment, 0x91, byte(len(programName)))
		pathSegment = append(pathSegment, programNameBytes...)
		if len(programName) % 2 != 0 {
			pathSegment = append(pathSegment, 0x00)
		}

	}

	pathSegment = append(pathSegment, 0x20, 0x6b)

	if offset < 256 {
		pathSegment = append(pathSegment, 0x24, byte(offset))
	}else{
		pathSegment = append(pathSegment, 0x25, byte(offset))
	}

	pathSegmentLen := len(pathSegment) / 2
	attributeCount := []byte{0x03, 0x00}
	symbolType := []byte{0x02, 0x00}
	byteCount := []byte{0x07, 0x00}
	symbolName := []byte{0x01, 0x00}
	var attributes []byte //{ 0x03, 0x00, 0x02, 0x00, 0x07, 0x00, 0x01, 0x00}
	attributes = append(attributes, attributeCount...)
	attributes = append(attributes, symbolType...)
	attributes = append(attributes, byteCount...)
	attributes = append(attributes, symbolName...)

	tagListRequest := []byte{byte(service), byte(pathSegmentLen)}
	tagListRequest = append(tagListRequest, pathSegment...)
	tagListRequest = append(tagListRequest, attributes...)

	return tagListRequest

}

func buildEipHeader(tagIOI []byte, sessionHandle []byte, otNetworkID []byte, sequenceCounter int) []byte {

	if contextPointer == 155 {
		contextPointer = 0
	}


	//eipPayLoadLength := byte(22 + len(tagIOI))
	eipConnectedDataLength := byte(len(tagIOI) + 2)

	eipCommand := []byte{0x70, 0x00}
	eipLength := []byte{byte(22 + len(tagIOI)), 0x00}
	eipSessionHandle := sessionHandle
	eipStatus := []byte {0x00, 0x00, 0x00, 0x00}
	//TODO: need to figure the contextMap purpose and values
	eipContext := contextMap[contextPointer]

	eipOptions := []byte{0x00, 0x00, 0x00, 0x00}
	eipInterfaceHandle := []byte{0x00, 0x00, 0x00, 0x00}
	eipTimeout := []byte{0x00, 0x00}
	eipItemCount := []byte{0x02, 0x00}
	eipItem1ID := []byte{0xa1, 0x00}
	eipItem1Length := []byte{0x04, 0x00}
	//TODO: confirm proper implementation fo otNetworkID
	eipItem1 := otNetworkID

	eipItem2ID := []byte{0xb1, 0x00}
	eipItem2Length := []byte{byte(eipConnectedDataLength), 0x00}
	//TODO: need to find out about the sequence counter and it's purpose.
	//eipSequence := []byte{0x00, 0x00} //sequence counter
	eipSequence := int32ToSliceOfBytes(true, sequenceCounter, 2)

	var eipHeaderFrame []byte
	eipHeaderFrame = append(eipHeaderFrame, eipCommand...)
	eipHeaderFrame = append(eipHeaderFrame, eipLength...)
	eipHeaderFrame = append(eipHeaderFrame, eipSessionHandle...)
	eipHeaderFrame = append(eipHeaderFrame, eipStatus...)
	eipHeaderFrame = append(eipHeaderFrame, eipContext...)
	eipHeaderFrame = append(eipHeaderFrame, eipOptions...)
	eipHeaderFrame = append(eipHeaderFrame, eipInterfaceHandle...)
	eipHeaderFrame = append(eipHeaderFrame, eipTimeout...)
	eipHeaderFrame = append(eipHeaderFrame, eipItemCount...)
	eipHeaderFrame = append(eipHeaderFrame, eipItem1ID...)
	eipHeaderFrame = append(eipHeaderFrame, eipItem1Length...)
	eipHeaderFrame = append(eipHeaderFrame, eipItem1...)
	eipHeaderFrame = append(eipHeaderFrame, eipItem2ID...)
	eipHeaderFrame = append(eipHeaderFrame, eipItem2Length...)
	eipHeaderFrame = append(eipHeaderFrame, eipSequence...)

	return append(eipHeaderFrame, tagIOI...)

}

var cipErrorCodes = map[int]string{
	0x00: "Success",
	0x01: "Connection failure",
	0x02: "Resource unavailable",
	0x03: "Invalid parameter value",
	0x04: "Path segment error",
	0x05: "Path destination unknown",
	0x06: "Partial transfer",
	0x07: "Connection lost",
	0x08: "Service not supported",
	0x09: "Invalid Attribute",
	0x0A: "Attribute list error",
	0x0B: "Already in requested mode/state",
	0x0C: "Object state conflict",
	0x0D: "Object already exists",
	0x0E: "Attribute not settable",
	0x0F: "Privilege violation",
	0x10: "Device state conflict",
	0x11: "Reply data too large",
	0x12: "Fragmentation of a premitive value",
	0x13: "Not enough data",
	0x14: "Attribute not supported",
	0x15: "Too much data",
	0x16: "Object does not exist",
	0x17: "Service fragmentation sequence not in progress",
	0x18: "No stored attribute data",
	0x19: "Store operation failure",
	0x1A: "Routing failure, request packet too large",
	0x1B: "Routing failure, response packet too large",
	0x1C: "Missing attribute list entry data",
	0x1D: "Invalid attribute value list",
	0x1E: "Embedded service error",
	0x1F: "Vendor specific",
	0x20: "Invalid Parameter",
	0x21: "Write once value or medium already written",
	0x22: "Invalid reply received",
	0x23: "Buffer overflow",
	0x24: "Invalid message format",
	0x25: "Key failure in path",
	0x26: "Path size invalid",
	0x27: "Unexpected attribute in list",
	0x28: "Invalid member ID",
	0x29: "Member not settable",
	0x2A: "Group 2 only server general failure",
	0x2B: "Unknown Modbus error",
	0x2C: "Attribute not gettable",
}

var contextMap = map[int] []byte{
	0: {0x57, 0x65, 0x27, 0x72, 0x65, 0x00, 0x00, 0x00},
	1: {0x6e, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	2: {0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x00, 0x00},
	3: {0x65, 0x72, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00},
	4: {0x74, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	5: {0x6c, 0x6f, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00},
	6: {0x59, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	7: {0x6b, 0x6e, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00},
	8: {0x74, 0x68, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00},
	9: {0x72, 0x75, 0x6c, 0x65, 0x73, 0x00, 0x00, 0x00},
	10: {0x61, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00},
	11: {0x73, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	12: {0x64, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	13: {0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	14: {0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	15: {0x66, 0x75, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00},
	16: {0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x00, 0x00},
	17: {0x6d, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x00, 0x00},
	18: {0x77, 0x68, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00},
	19: {0x49, 0x27, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00},
	20: {0x74, 0x68, 0x69, 0x6e, 0x6b, 0x00, 0x00, 0x00},
	21: {0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
	22: {0x6f, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	23: {0x59, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	24: {0x77, 0x6f, 0x75, 0x6c, 0x64, 0x6e, 0x74, 0x00},
	25: {0x67, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00},
	26: {0x74, 0x68, 0x69, 0x73, 0x00, 0x00, 0x00, 0x00},
	27: {0x66, 0x72, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x00},
	28: {0x61, 0x6e, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00},
	29: {0x6f, 0x74, 0x68, 0x65, 0x72, 0x00, 0x00, 0x00},
	30: {0x67, 0x75, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00},
	31: {0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	32: {0x6a, 0x75, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00},
	33: {0x77, 0x61, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	34: {0x74, 0x65, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00},
	35: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	36: {0x68, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00},
	37: {0x49, 0x27, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00},
	38: {0x66, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x00},
	39: {0x47, 0x6f, 0x74, 0x74, 0x61, 0x00, 0x00, 0x00},
	40: {0x6d, 0x61, 0x6b, 0x65, 0x00, 0x00, 0x00, 0x00},
	41: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	42: {0x75, 0x6e, 0x64, 0x65, 0x72, 0x00, 0x00, 0x00},
	43: {0x73, 0x74, 0x61, 0x6e, 0x64, 0x00, 0x00, 0x00},
	44: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	45: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	46: {0x67, 0x69, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00},
	47: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	48: {0x75, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	49: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	50: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	51: {0x6c, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00},
	52: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	53: {0x64, 0x6f, 0x77, 0x6e, 0x00, 0x00, 0x00, 0x00},
	54: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	55: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	56: {0x72, 0x75, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00},
	57: {0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00},
	58: {0x61, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00},
	59: {0x64, 0x65, 0x73, 0x65, 0x72, 0x74, 0x00, 0x00},
	60: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	61: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	62: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	63: {0x6d, 0x61, 0x6b, 0x65, 0x00, 0x00, 0x00, 0x00},
	64: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	65: {0x63, 0x72, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00},
	66: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	67: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	68: {0x73, 0x61, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00},
	69: {0x67, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x00},
	70: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	71: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	72: {0x74, 0x65, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00},
	73: {0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	74: {0x6c, 0x69, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00},
	75: {0x61, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00},
	76: {0x68, 0x75, 0x72, 0x74, 0x00, 0x00, 0x00, 0x00},
	77: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	78: {0x57, 0x65, 0x27, 0x76, 0x65, 0x00, 0x00, 0x00},
	79: {0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x00, 0x00, 0x00},
	80: {0x65, 0x61, 0x63, 0x68, 0x00, 0x00, 0x00, 0x00},
	81: {0x6f, 0x74, 0x68, 0x65, 0x72, 0x00, 0x00, 0x00},
	82: {0x66, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00},
	83: {0x73, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	84: {0x6c, 0x6f, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00},
	85: {0x59, 0x6f, 0x75, 0x72, 0x00, 0x00, 0x00, 0x00},
	86: {0x68, 0x65, 0x61, 0x72, 0x74, 0x27, 0x73, 0x00},
	87: {0x62, 0x65, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00},
	88: {0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x00, 0x00},
	89: {0x62, 0x75, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00},
	90: {0x59, 0x6f, 0x75, 0x27, 0x72, 0x65, 0x00, 0x00},
	91: {0x74, 0x6f, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00},
	92: {0x73, 0x68, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00},
	93: {0x74, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	94: {0x73, 0x61, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00},
	95: {0x69, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	96: {0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x00, 0x00},
	97: {0x77, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	98: {0x62, 0x6f, 0x74, 0x68, 0x00, 0x00, 0x00, 0x00},
	99: {0x6b, 0x6e, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00},
	100: {0x77, 0x68, 0x61, 0x74, 0x27, 0x73, 0x00, 0x00},
	101: {0x62, 0x65, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00},
	102: {0x67, 0x6f, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00},
	103: {0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	104: {0x57, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	105: {0x6b, 0x6e, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00},
	106: {0x74, 0x68, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00},
	107: {0x67, 0x61, 0x6d, 0x65, 0x00, 0x00, 0x00, 0x00},
	108: {0x61, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00},
	109: {0x77, 0x65, 0x27, 0x72, 0x65, 0x00, 0x00, 0x00},
	110: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	111: {0x70, 0x6c, 0x61, 0x79, 0x00, 0x00, 0x00, 0x00},
	112: {0x69, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	113: {0x41, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00},
	114: {0x69, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	115: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	116: {0x61, 0x73, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00},
	117: {0x6d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	118: {0x68, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00},
	119: {0x49, 0x27, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00},
	120: {0x66, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x00},
	121: {0x44, 0x6f, 0x6e, 0x27, 0x74, 0x00, 0x00, 0x00},
	122: {0x74, 0x65, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00},
	123: {0x6d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	124: {0x79, 0x6f, 0x75, 0x27, 0x72, 0x65, 0x00, 0x00},
	125: {0x74, 0x6f, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00},
	126: {0x62, 0x6c, 0x69, 0x6e, 0x64, 0x00, 0x00, 0x00},
	127: {0x74, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	128: {0x73, 0x65, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00},
	129: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	130: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	131: {0x67, 0x69, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00},
	132: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	133: {0x75, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	134: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	135: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	136: {0x6c, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00},
	137: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	138: {0x64, 0x6f, 0x77, 0x6e, 0x00, 0x00, 0x00, 0x00},
	139: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	140: {0x72, 0x75, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00},
	141: {0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00},
	142: {0x61, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00},
	143: {0x64, 0x65, 0x73, 0x65, 0x72, 0x74, 0x00, 0x00},
	144: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	145: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	146: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	147: {0x6d, 0x61, 0x6b, 0x65, 0x00, 0x00, 0x00, 0x00},
	148: {0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
	149: {0x63, 0x72, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00},
	150: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	151: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00},
	152: {0x73, 0x61, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00},
	153: {0x67, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x00},
	154: {0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00},
	155: {0x67, 0x6f, 0x6e, 0x6e, 0x61, 0xe2, 0x80, 0xa6},

}
